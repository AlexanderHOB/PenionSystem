{"remainingRequest":"A:\\PenionSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!A:\\PenionSystem\\frontend\\src\\views\\Mesas.vue?vue&type=script&lang=js&","dependencies":[{"path":"A:\\PenionSystem\\frontend\\src\\views\\Mesas.vue","mtime":1560791214976},{"path":"A:\\PenionSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"A:\\PenionSystem\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"A:\\PenionSystem\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"A:\\PenionSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"A:\\PenionSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport LoadingDialog from '../components/LoadingDialog';\nimport LoadingFish from '../components/LoadingFish';\nimport ErrorMessage from '../components/ErrorMessage';\n\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n  components: {\n    LoadingDialog,\n    LoadingFish,\n    ErrorMessage\n  },\n  data:() => ({\n    title: 'Mesas',\n    // Data para las mesas\n    messageMesas: '',\n    mesas: [],\n    mesasTotal: 0,\n    // Data para la paginación\n    pageTotal: 0,\n    page: 1,\n    paginateDisabled: false,\n    // Datos para valdiar formulario\n    valid: true,\n    rules: {\n      required: value => !!value || 'Required.',\n      counter: value => value.length <= 50 || 'como maximo 50 caracteres',\n      maxValue: value => value <= 30 || 'Capacidad no puede ser mas de 30'\n    },\n    // Data para editar Mesa\n    numero: null,\n    capacidad: null,\n    descripcion: '',\n    create: true,\n  }),\n  methods: {\n    test(){\n      this.descripcion = '';\n    },\n    // OBTENER MESAS\n    async getMesas(){\n      try {\n        this.loadingTitleMutation('Accediendo a la información');\n        this.loadingDialogMutation(true);\n\n        let response = await axios.get(this.url + 'mesa', this.config);\n\n        if(response.data.data){\n          let data = response.data;\n          let mesas = data.data;\n          if(mesas.length > 0){\n            this.mesas = mesas;\n            this.messageMesas = '';\n            this.mesasTotal = data.total;\n\n            if(data.last_page){\n              this.pageTotal = data.last_page;\n            }\n            this.page = 1;\n          }else {\n            this.messageMesas = 'No existen mesas creadas';\n            this.pageTotal = false;\n          }\n          this.headerActionsMutation(true);\n        }else {\n          this.headerActionsMutation(false);\n          this.messageMesas = response.data.message;\n          this.mesas = [];\n          this.pageTotal = false;\n        }\n      } catch (error) {\n        this.headerActionsMutation(false);\n        this.pageTotal = false;\n        this.messageMesas = 'Error al conctar con el servidor';\n      }finally {\n        this.loadingDialogMutation(false);\n      }\n    },\n\n    // ACTUALIZANDO MESAS\n    async refreshMesas(page, loadingTitle ='Accediendo a la información', create = true){\n      try {\n        this.paginateDisabled = true;\n        this.loadingTitleMutation(loadingTitle);\n        if(create){\n          this.loadingDialogMutation(true);\n        }\n\n        let response = await axios.get(this.url + 'mesa', {\n          params: {\n            page: this.page\n          },\n          headers: {\n            Authorization: this.config.headers.Authorization\n          }\n        });\n        let data = response.data;\n        let mesas = response.data.data;\n        this.messageMesas = '';\n        this.mesas = mesas;\n        this.headerActionsMutation(true);\n      } catch (error) {\n        this.headerActionsMutation(false);\n        this.pageTotal = false;\n        this.messageMesas = 'Error al conctar con el servidor';\n      }finally {\n        this.loadingDialogMutation(false);\n        this.paginateDisabled = false;\n      }\n    },\n\n    // MODAL PARA EDITAR MESA\n    editarMesaModal(index){\n      this.numero = this.mesas[index].numero;\n      this.capacidad = this.mesas[index].capacidad;\n      this.descripcion = this.mesas[index].descripcion;\n      this.index = index;\n      this.id = this.mesas[index].id;\n      this.create = false;\n      this.$refs.form.resetValidation();\n      this.createModalMutation(true);\n    },\n\n    // CERRAR MODAL\n    closeModal(){\n      this.createModalMutation(false);\n      setTimeout(this.resetForm, 100);\n    },\n\n    // Limpiar Formulario\n    resetForm(){\n      this.numero = null;\n      this.capacidad = null;\n      this.descripcion = '';\n      this.create = true;\n      this.$refs.form.resetValidation();\n    },\n\n    // CREAR MESAS\n    async crearMesa(){\n      try {\n        if (this.$refs.form.validate()) {\n          this.loadingTitleMutation('Subiendo informacón');\n          this.loadingDialogMutation(true);\n          this.createModalMutation(false);\n\n          let response = await axios.post(this.url + 'mesa/registrar', {\n            numero: this.numero,\n            capacidad: this.capacidad,\n            descripcion: this.descripcion\n          }, this.config);\n\n          this.resetForm();            \n          \n          if(this.mesasTotal % 10 == 0){\n            this.pageTotal++;\n          }\n          this.page = this.pageTotal;\n          await this.refreshMesas(null, 'Creando Mesa', false);\n        }\n      } catch (error) {\n        this.resetForm();\n        console.log(error);\n      }\n    },\n\n    // EDITAR MESA\n    async editarMesa(){\n      try {\n        if (this.$refs.form.validate()) {\n          this.createModalMutation(false);\n          if(this.descripcion == '' || this.descripcion == null){\n            this.descripcion = 'Mesa sin descripción';\n          }\n\n          let numeroBup = this.numero;\n          let capacidadBup = this.capacidad;\n          let descripcionBup = this.descripcion;\n\n          this.mesas[this.index].numero = this.numero;\n          this.mesas[this.index].capacidad = this.capacidad;\n          this.mesas[this.index].descripcion = this.descripcion;\n\n          this.resetForm();\n\n          let response = await axios.post(this.url + 'mesa/actualizar/' + this.id, {\n            numero: numeroBup,\n            capacidad: capacidadBup,\n            descripcion: descripcionBup\n          }, this.config);\n        }\n      } catch (error) {\n        this.resetForm();\n        console.log(error);\n      }\n    },\n    ...mapMutations(['loadingDialogMutation', 'loadingFishMutation', 'createModalMutation', 'headerActionsMutation', 'loadingTitleMutation', 'breadcrumbMutation']),\n  },\n  computed: {\n    ...mapState(['url', 'config', 'loadingFish', 'createModalState']),\n    createModal: {\n      get() {\n        return this.createModalState\n      },\n      set(value) {\n        this.createModalMutation(value)\n      }\n    }\n  },\n  created() {\n    this.headerActionsMutation(false);\n    this.loadingFishMutation(true);\n  },\n  // Al crear la instancia de vue\n  async mounted(){\n    this.breadcrumbMutation('Mesas');\n    await this.getMesas();\n    this.loadingFishMutation(false);\n  }\n}\n",{"version":3,"sources":["Mesas.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Mesas.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n\r\n  <LoadingFish v-if=\"loadingFish\" />\r\n\r\n  <v-container grid-list-lg v-else>\r\n    <v-layout row wrap>\r\n      <v-flex xs12 v-if=\"messageMesas\">\r\n        <ErrorMessage :errorMessage=\"messageMesas\" :refresh=\"getMesas\" />\r\n      </v-flex>\r\n      <template v-else>\r\n        <v-flex xs12 class=\"d-flex align-center\">\r\n          <h1 class=\"display-1\">{{ title }}</h1>\r\n          <div class=\"text-xs-right\">\r\n            <v-btn class=\"blue\" dark fab small @click=\"getMesas\"><v-icon>replay</v-icon></v-btn>\r\n          </div>\r\n        </v-flex>\r\n        <v-flex v-for=\"(mesa, index) of mesas\" :key=\"mesa.id\" xs12 sm6 md4 lg3>\r\n          <v-card>\r\n            <v-img\r\n            :src=\"require('../assets/img/mesas/mesaOcupada.svg')\"\r\n            contain\r\n            height=\"100\"\r\n            class=\"mesa\"\r\n            ></v-img>\r\n            <v-card-title class=\"pt-0\">\r\n                <h2>{{ mesa.id }}</h2>\r\n            </v-card-title>\r\n            <v-card-text class=\"py-0\">\r\n              <p><strong>Capacidad: {{ mesa.capacidad }} {{ mesa.capacidad === 1 ? 'persona' : 'personas' }}</strong></p>\r\n              <p>{{ mesa.descripcion }}</p>\r\n            </v-card-text>\r\n            <v-card-actions>\r\n              <v-btn color=\"green\" flat @click=\"editarMesaModal(index)\">Editar Mesa</v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-flex>\r\n      </template>\r\n    </v-layout>\r\n\r\n    <v-dialog v-model=\"createModal\" persistent max-width=\"600px\">\r\n      <v-card>\r\n        <v-card-title>\r\n          <v-spacer></v-spacer>\r\n          <h3 v-if=\"create\" class=\"headline\">Crear Mesa</h3>\r\n          <h3 v-else class=\"headline\">Editar Mesa</h3>\r\n          <v-spacer></v-spacer>\r\n        </v-card-title>\r\n        <v-card-text class=\"pt-0\">\r\n          <v-form\r\n            ref=\"form\"\r\n            lazy-validation\r\n            v-model=\"valid\"\r\n          >\r\n            <v-container>\r\n              <v-layout row wrap>\r\n                <v-flex xs12 sm6>\r\n                  <v-text-field\r\n                    color=\"blue\"\r\n                    label=\"Número de mesa\"\r\n                    v-model=\"numero\"\r\n                    autofocus\r\n                    :rules=\"[rules.required]\"\r\n                    counter\r\n                    mask=\"##\"\r\n                  ></v-text-field>\r\n                </v-flex> \r\n                <v-flex xs12 sm6>\r\n                  <v-text-field \r\n                    color=\"blue\"\r\n                    label=\"Capacidad\"\r\n                    v-model=\"capacidad\"\r\n                    :rules=\"[rules.required, rules.maxValue]\"\r\n                    counter\r\n                    mask=\"##\"\r\n                  ></v-text-field>\r\n                </v-flex>\r\n                <v-flex xs12>\r\n                  <v-textarea\r\n                    color=\"blue\"\r\n                    label=\"Descripción\"\r\n                    auto-grow\r\n                    @click:append=\"descripcion = ''\"\r\n                    v-model=\"descripcion\"\r\n                    :rules=\"[rules.counter]\"\r\n                    counter=\"50\"\r\n                    append-icon=\"clear\"\r\n                  ></v-textarea>\r\n                </v-flex>\r\n              </v-layout>\r\n            </v-container>\r\n          </v-form>\r\n        </v-card-text>\r\n        <v-card-actions class=\"text-xs-center\">\r\n          <v-spacer></v-spacer>\r\n            <v-btn color=\"red darken-1\" flat @click=\"closeModal\">Cerrar</v-btn>\r\n            <v-btn :disabled=\"!valid\" v-if=\"create\" color=\"green\" flat @click=\"crearMesa\">Crear</v-btn>\r\n            <v-btn :disabled=\"!valid\" v-else color=\"green darken-1\" flat @click=\"editarMesa\">Editar</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <template v-if=\"pageTotal\">\r\n      <div class=\"text-xs-center mt-4\">\r\n        <v-pagination\r\n          v-model=\"page\"\r\n          :length=\"pageTotal\"\r\n          color=\"blue\"\r\n          circle\r\n          :disabled=\"paginateDisabled\"\r\n          @input=\"refreshMesas\"\r\n          @next=\"refreshMesas\"\r\n          @previous=\"refreshMesas\"\r\n        ></v-pagination>\r\n      </div>\r\n    </template>\r\n\r\n    <LoadingDialog />\r\n\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n  import axios from 'axios';\r\n  import LoadingDialog from '../components/LoadingDialog';\r\n  import LoadingFish from '../components/LoadingFish';\r\n  import ErrorMessage from '../components/ErrorMessage';\r\n\r\n  import { mapState, mapMutations } from 'vuex';\r\n\r\n  export default {\r\n    components: {\r\n      LoadingDialog,\r\n      LoadingFish,\r\n      ErrorMessage\r\n    },\r\n    data:() => ({\r\n      title: 'Mesas',\r\n      // Data para las mesas\r\n      messageMesas: '',\r\n      mesas: [],\r\n      mesasTotal: 0,\r\n      // Data para la paginación\r\n      pageTotal: 0,\r\n      page: 1,\r\n      paginateDisabled: false,\r\n      // Datos para valdiar formulario\r\n      valid: true,\r\n      rules: {\r\n        required: value => !!value || 'Required.',\r\n        counter: value => value.length <= 50 || 'como maximo 50 caracteres',\r\n        maxValue: value => value <= 30 || 'Capacidad no puede ser mas de 30'\r\n      },\r\n      // Data para editar Mesa\r\n      numero: null,\r\n      capacidad: null,\r\n      descripcion: '',\r\n      create: true,\r\n    }),\r\n    methods: {\r\n      test(){\r\n        this.descripcion = '';\r\n      },\r\n      // OBTENER MESAS\r\n      async getMesas(){\r\n        try {\r\n          this.loadingTitleMutation('Accediendo a la información');\r\n          this.loadingDialogMutation(true);\r\n\r\n          let response = await axios.get(this.url + 'mesa', this.config);\r\n\r\n          if(response.data.data){\r\n            let data = response.data;\r\n            let mesas = data.data;\r\n            if(mesas.length > 0){\r\n              this.mesas = mesas;\r\n              this.messageMesas = '';\r\n              this.mesasTotal = data.total;\r\n\r\n              if(data.last_page){\r\n                this.pageTotal = data.last_page;\r\n              }\r\n              this.page = 1;\r\n            }else {\r\n              this.messageMesas = 'No existen mesas creadas';\r\n              this.pageTotal = false;\r\n            }\r\n            this.headerActionsMutation(true);\r\n          }else {\r\n            this.headerActionsMutation(false);\r\n            this.messageMesas = response.data.message;\r\n            this.mesas = [];\r\n            this.pageTotal = false;\r\n          }\r\n        } catch (error) {\r\n          this.headerActionsMutation(false);\r\n          this.pageTotal = false;\r\n          this.messageMesas = 'Error al conctar con el servidor';\r\n        }finally {\r\n          this.loadingDialogMutation(false);\r\n        }\r\n      },\r\n\r\n      // ACTUALIZANDO MESAS\r\n      async refreshMesas(page, loadingTitle ='Accediendo a la información', create = true){\r\n        try {\r\n          this.paginateDisabled = true;\r\n          this.loadingTitleMutation(loadingTitle);\r\n          if(create){\r\n            this.loadingDialogMutation(true);\r\n          }\r\n\r\n          let response = await axios.get(this.url + 'mesa', {\r\n            params: {\r\n              page: this.page\r\n            },\r\n            headers: {\r\n              Authorization: this.config.headers.Authorization\r\n            }\r\n          });\r\n          let data = response.data;\r\n          let mesas = response.data.data;\r\n          this.messageMesas = '';\r\n          this.mesas = mesas;\r\n          this.headerActionsMutation(true);\r\n        } catch (error) {\r\n          this.headerActionsMutation(false);\r\n          this.pageTotal = false;\r\n          this.messageMesas = 'Error al conctar con el servidor';\r\n        }finally {\r\n          this.loadingDialogMutation(false);\r\n          this.paginateDisabled = false;\r\n        }\r\n      },\r\n\r\n      // MODAL PARA EDITAR MESA\r\n      editarMesaModal(index){\r\n        this.numero = this.mesas[index].numero;\r\n        this.capacidad = this.mesas[index].capacidad;\r\n        this.descripcion = this.mesas[index].descripcion;\r\n        this.index = index;\r\n        this.id = this.mesas[index].id;\r\n        this.create = false;\r\n        this.$refs.form.resetValidation();\r\n        this.createModalMutation(true);\r\n      },\r\n\r\n      // CERRAR MODAL\r\n      closeModal(){\r\n        this.createModalMutation(false);\r\n        setTimeout(this.resetForm, 100);\r\n      },\r\n\r\n      // Limpiar Formulario\r\n      resetForm(){\r\n        this.numero = null;\r\n        this.capacidad = null;\r\n        this.descripcion = '';\r\n        this.create = true;\r\n        this.$refs.form.resetValidation();\r\n      },\r\n\r\n      // CREAR MESAS\r\n      async crearMesa(){\r\n        try {\r\n          if (this.$refs.form.validate()) {\r\n            this.loadingTitleMutation('Subiendo informacón');\r\n            this.loadingDialogMutation(true);\r\n            this.createModalMutation(false);\r\n\r\n            let response = await axios.post(this.url + 'mesa/registrar', {\r\n              numero: this.numero,\r\n              capacidad: this.capacidad,\r\n              descripcion: this.descripcion\r\n            }, this.config);\r\n\r\n            this.resetForm();            \r\n            \r\n            if(this.mesasTotal % 10 == 0){\r\n              this.pageTotal++;\r\n            }\r\n            this.page = this.pageTotal;\r\n            await this.refreshMesas(null, 'Creando Mesa', false);\r\n          }\r\n        } catch (error) {\r\n          this.resetForm();\r\n          console.log(error);\r\n        }\r\n      },\r\n\r\n      // EDITAR MESA\r\n      async editarMesa(){\r\n        try {\r\n          if (this.$refs.form.validate()) {\r\n            this.createModalMutation(false);\r\n            if(this.descripcion == '' || this.descripcion == null){\r\n              this.descripcion = 'Mesa sin descripción';\r\n            }\r\n\r\n            let numeroBup = this.numero;\r\n            let capacidadBup = this.capacidad;\r\n            let descripcionBup = this.descripcion;\r\n\r\n            this.mesas[this.index].numero = this.numero;\r\n            this.mesas[this.index].capacidad = this.capacidad;\r\n            this.mesas[this.index].descripcion = this.descripcion;\r\n\r\n            this.resetForm();\r\n\r\n            let response = await axios.post(this.url + 'mesa/actualizar/' + this.id, {\r\n              numero: numeroBup,\r\n              capacidad: capacidadBup,\r\n              descripcion: descripcionBup\r\n            }, this.config);\r\n          }\r\n        } catch (error) {\r\n          this.resetForm();\r\n          console.log(error);\r\n        }\r\n      },\r\n      ...mapMutations(['loadingDialogMutation', 'loadingFishMutation', 'createModalMutation', 'headerActionsMutation', 'loadingTitleMutation', 'breadcrumbMutation']),\r\n    },\r\n    computed: {\r\n      ...mapState(['url', 'config', 'loadingFish', 'createModalState']),\r\n      createModal: {\r\n        get() {\r\n          return this.createModalState\r\n        },\r\n        set(value) {\r\n          this.createModalMutation(value)\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      this.headerActionsMutation(false);\r\n      this.loadingFishMutation(true);\r\n    },\r\n    // Al crear la instancia de vue\r\n    async mounted(){\r\n      this.breadcrumbMutation('Mesas');\r\n      await this.getMesas();\r\n      this.loadingFishMutation(false);\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .mesa {\r\n    transform: translateY(25px);\r\n  }\r\n</style>"]}]}